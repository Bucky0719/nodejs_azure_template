parameters:
  - name: dockerRegistryServiceConnection
    type: string
    default: 'your-docker-service-connection-id'
  
  - name: imageName
    type: string
    default: 'your-docker-image-name'
  
  - name: dockerfilePath
    type: string
    default: 'Dockerfile'
  
  - name: vmImage
    type: string
    default: 'agent2'  # Explicitly assign to agent2

stages:
- stage: Build
  displayName: "Build Stage"
  jobs:
  - job: BuildJob
    displayName: "Install Node.js Dependencies"
    pool:
      name: "Default"  # Ensure this matches your Azure DevOps agent pool
      demands:
        - Agent.Name -equals agent2  # Runs only on agent2
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'  # Set the Node.js version

    - script: npm install
      displayName: "Install dependencies"

    - script: echo "Build completed successfully!"
      displayName: "Build Success"

- stage: DockerBuild
  displayName: "Build & Push Docker Image"
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DockerJob
    displayName: "Build and Push Docker Image"
    pool:
      name: "Default"
      demands:
        - Agent.Name -equals agent2
    steps:
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: ${{ parameters.imageName }}
        dockerfile: ${{ parameters.dockerfilePath }}
        containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
        tags: 'latest'

- stage: Deploy
  displayName: "Deploy Stage"
  dependsOn: DockerBuild
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: "Deploy Container"
    pool:
      name: "Default"
      demands:
        - Agent.Name -equals agent2
    steps:
    - script: echo "Deploying the container..."
    - script: |
        docker pull $(imageName):latest
        docker stop node_app || true
        docker rm node_app || true
        docker run -d -p 8081:8081 --name node_app ${{ parameters.imageName }}:latest
      displayName: "Run Docker Container"

- stage: FailureNotification
  displayName: "Notify on Failure"
  dependsOn: [Build, DockerBuild, Deploy]
  condition: failed()  # Runs only if any of the previous stages fail
  jobs:
  - job: NotifyJob
    displayName: "Send Failure Notification"
    pool:
      name: "Default"  # Change to your self-hosted agent pool
    steps:
    - script: echo "Pipeline failed! Notify the team."

- stage: SuccessNotification
  displayName: "Notify on Success"
  dependsOn: [Build, DockerBuild, Deploy]
  condition: succeeded()  # Runs only if all previous stages succeed
  jobs:
  - job: NotifySuccessJob
    displayName: "Send Success Notification"
    pool:
      name: "Default"  # Change to your self-hosted agent pool
    steps:
    - script: echo "Pipeline completed successfully! Notify the team."

      
